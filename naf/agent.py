from naf.replay_buffer import ReplayBuffer, PrioritizedReplay, ModelingBuffer
from naf.networks import NAF, DeepNAF, unscale_action
from naf.ilqg import MBA

import torch
import torch.nn as nn 
from torch.nn.utils import clip_grad_norm_
import numpy as np 
import torch.optim as optim
import random

from bgrisks import simple_reward, my_reward_closure
from simglucose.simulation.env import risk_diff


class NAF_Agent():
    """Interacts with and learns from the environment."""

    def __init__(self,
                 state_size,
                 state_space,
                 action_size,
                 action_space,
                 horizon,
                 device,
                 args,
                 writer):
        """Initialize an Agent object.
        
        Params
        ======
            state_size (int): dimension of each state
            action_size (int): dimension of each action
            Network (str): dqn network type
            layer_size (int): size of the hidden layer
            BATCH_SIZE (int): size of the training batch
            BUFFER_SIZE (int): size of the replay memory
            LR (float): learning rate
            TAU (float): tau for soft updating the network weights
            GAMMA (float): discount factor
            UPDATE_EVERY (int): update frequency
            device (str): device that is used for the compute
            seed (int): random seed
        """
        self.state_size = state_size
        self.state_space = state_space
        self.action_size = action_size
        self.action_space = action_space
        self.horizon = horizon
        self.replaybuf_size = args.mem
        self.seed = random.seed(args.seed)
        self.device = device
        self.TAU = args.tau
        self.GAMMA = args.gamma
        self.nstep = args.nstep
        self.UPDATE_EVERY = args.update_every
        self.NUPDATES = args.n_updates
        self.BATCH_SIZE = args.batch_size
        self.Q_updates = 0
        self.per = args.per
        self.clip_grad = args.clip_grad
        self.d2rl = args.d2rl
        
        # model based acceleration params
        self.mba = args.mba
        self.mu_prob = args.mu_prob
        self.use_ilqg_policy = False
        self.models_fitted = False
        self.llds = {}  # dict of local linear dynamics keyed by t (int) where each lld is a tuple (F_t, f_t)
        self.gs = []  # list of controllers keyed by t (int) generated by ilqg. g: state -> action
                      # returns action of np.zeros(self.action_size) if no controller exists
        self.sigma = args.sigma
        self.imag_rollouts = args.imag_rollouts  # m in Alg 2 of paper
        self.imag_rollout_len = args.imag_rollout_len  # l in Alg 2 of paper
        self.envname = args.env
        self.custom_reward = args.custom_reward
        self.default_lindyn = self.get_default_lindyn(args.default_lindyn)
        self.lindyn_scale = args.lindyn_scale
        
        
        self.rxu_quad_scale = args.rxu_quad_scale
        self.rxu_lin_scale = args.rxu_lin_scale
        self.rxu = self.lq_reward_matrices()
        
        
        self.accelerator = MBA(x_len=self.state_size,
                               u_len=self.action_size,
                               rxu=self.rxu,
                               horizon=self.horizon)

        # Q-Network
        if args.d2rl == 0:
            self.qnetwork_local = NAF(state_size, action_size, action_space, args.layer_size, args.seed).to(device)
            self.qnetwork_target = NAF(state_size, action_size, action_space, args.layer_size, args.seed).to(device)
        else:
            self.qnetwork_local = DeepNAF(state_size, action_size, action_space, args.layer_size, args.seed).to(device)
            self.qnetwork_target = DeepNAF(state_size, action_size, action_space, args.layer_size, args.seed).to(device)
        
        #wandb.watch(self.qnetwork_local)
        self.writer = writer
        self.optimizer = optim.Adam(self.qnetwork_local.parameters(), lr=args.learning_rate)
        print(self.qnetwork_local)
        
        # Replay memory
        if args.per == True:
            print("Using Prioritized Experience Replay")
            self.memory = PrioritizedReplay(buffer_size=args.mem, 
                                            batch_size=args.batch_size,
                                            seed=args.seed,
                                            gamma=args.gamma,
                                            n_step=self.nstep,
                                            beta_frames=args.frames)
        else:
            print("Using Regular Experience Replay")
            self.memory = ReplayBuffer(buffer_size=args.mem,
                                       batch_size=args.batch_size,
                                       device=self.device,
                                       seed=args.seed,
                                       gamma=args.gamma,
                                       nstep=args.nstep)
            self.fictional = ReplayBuffer(buffer_size=args.mem,
                                          batch_size=args.batch_size,
                                          device=self.device,
                                          seed=args.seed,
                                          gamma=args.gamma,
                                          nstep=args.nstep)
            self.B = ModelingBuffer(buffer_size=args.refit_every*self.horizon,
                                    batch_size=args.imag_rollouts,
                                    device=self.device)
            self.B_old = ModelingBuffer(buffer_size=args.refit_every*self.horizon,
                                        batch_size=args.imag_rollouts,
                                        device=self.device)
        
        # define loss
        if args.loss == "mse":
            self.loss = nn.MSELoss()
        elif args.loss == "huber":
            self.loss = nn.SmoothL1Loss()
        else:
            print("Loss is not defined choose between mse and huber!")
        
        # Initialize time step (for updating every UPDATE_EVERY steps)
        self.t_step = 0
        
    def load_model(self, modelname):
        if self.d2rl == 0:
            self.qnetwork_local.load_state_dict(torch.load(modelname + '_.pth'))
            self.qnetwork_target.load_state_dict(torch.load(modelname + '_.pth'))
        else:
            self.qnetwork_local.load_state_dict(torch.load(modelname + '_.pth'))
            self.qnetwork_target.load_state_dict(torch.load(modelname + '_.pth'))
        
    def get_default_lindyn(self, default_lindyn):
        if default_lindyn == 'None':
            return None
    
    def step(self, state, action, reward, next_state, done, t, ep):
        # Save experience in replay memory
        self.memory.add(state, action, reward, next_state, done, t)
        self.B.add(state, action, reward, next_state, done, t)
        
        # imaginary rollouts
        if self.mba and self.models_fitted:
            # add 1 because t is 0-indexed, and it needs to be 1-indexed for cond to work
            if ((ep * self.horizon) + t + 1) % self.imag_rollouts == 0:
                exps = self.B_old.sample_exps()
                self._do_and_store_im_rollouts(exps)
                
        
        # Learn every UPDATE_EVERY time steps.
        self.t_step = (self.t_step + 1) % self.UPDATE_EVERY
        self.train_fictional = len(self.fictional) > (self.BATCH_SIZE * self.imag_rollout_len)
        if self.t_step == 0:
            # If enough samples are available in memory, get random subset and learn
            if len(self.memory) > self.BATCH_SIZE:
                Q_losses = []
                for _ in range(self.NUPDATES):
                    # update using true experiences
                    experiences = self.memory.sample()
                    if self.per == True:
                        loss = self.learn_per(experiences)
                    else:
                        loss = self.learn(experiences)
                    
                    # update using imaginary experiences
                    if self.mba and self.train_fictional:
                        for _ in range(self.imag_rollout_len):
                            experiences = self.fictional.sample()
                            if self.per == True:
                                loss += self.learn_per(experiences)
                            else:
                                loss += self.learn(experiences)
                    self.Q_updates += 1
                    Q_losses.append(loss)
                self.writer.add_scalar("Q_loss", np.mean(Q_losses), self.Q_updates)
                #.log({"Q_loss": np.mean(Q_losses), "Optimization step": self.Q_updates})
                
    def act_without_noise(self, state):
        # only called in evaluate, so just use mu rather than choosing between mu and ilqg
        state = torch.from_numpy(state).float().to(self.device)
        
        self.qnetwork_local.eval()
        with torch.no_grad():
            _, _, _, action = self.qnetwork_local(state.unsqueeze(0))
        self.qnetwork_local.train()
        return action.cpu().squeeze().numpy().reshape((self.action_size,))
    
    def _act_mu_without_noise(self, state):
        self.qnetwork_local.eval()
        with torch.no_grad():
            _, _, _, action = self.qnetwork_local(state.unsqueeze(0))
        self.qnetwork_local.train()
        return action.cpu().squeeze().numpy().reshape((self.action_size,))
    
    def _act_ilqg_without_noise(self, state, t):
        g = self.gs[t]
        action = g(state).reshape((self.action_size,))
        assert action.shape[0] == self.action_size
        action = np.clip(action, self.action_space.low, self.action_space.high)
        return action

    def act(self, state, t):
        """Calculating the action
        
        Params
        ======
            state (array_like): current state
            
        """
        
        if not self.use_ilqg_policy:
            state = torch.from_numpy(state).float().to(self.device)
            action = self._act_mu(state)
        else:
            action = self._act_ilqg(state, t)
            
        return action
    
    def _act_mu(self, state):
        # act using naf policy
        self.qnetwork_local.eval()
        with torch.no_grad():
            action, _, _, _ = self.qnetwork_local(state.unsqueeze(0))
        self.qnetwork_local.train()

        return action.cpu().squeeze().numpy().reshape((self.action_size,))
    
    def _act_ilqg(self, state, t):
        g = self.gs[t]
        action = g(state).reshape((self.action_size,))
        assert action.shape[0] == self.action_size
        noise = np.random.normal(scale=self.sigma, size=action.shape)
        action += noise
        action = np.clip(action, self.action_space.low, self.action_space.high)
        return action
    
    def _do_and_store_im_rollouts(self, experiences):
        for k, exp in enumerate(experiences):
            next_state = exp.next_state
            t = exp.t
            for i in range(1, self.imag_rollout_len+1):
                tprime = t + i
                lindyn = self.llds.get(tprime, self.default_lindyn)
                if lindyn is None:
                    # no more dynamics to simulate from
                    break
                    
                F_t, f_t = lindyn
                state = next_state
                action = self.act(state, tprime)

                # use model to simulate transitions
                state_action = np.concatenate([state, action])
                next_state = np.matmul(F_t, state_action)
                next_state = next_state.reshape((self.state_size,))
                next_state += f_t
                next_state *= self.lindyn_scale
                next_state = np.clip(next_state, self.state_space.low, self.state_space.high)
                
                # get corresponding reward
                reward, done = self.reward_fn(state, next_state, action, tprime)
                assert not np.isnan(reward)
                self.fictional.add(state, action, reward, next_state, done, tprime)

    def learn(self, experiences):
        """Update value parameters using given batch of experience tuples.
        Params
        ======
            experiences (Tuple[torch.Tensor]): tuple of (s, a, r, s', done) tuples 
        """

        states, actions, rewards, next_states, dones, ts = experiences

        # get the Value for the next state from target model
        with torch.no_grad():
            _, _, V_, _ = self.qnetwork_target(next_states)

        # Compute Q targets for current states 
        V_targets = rewards + (self.GAMMA**self.nstep * V_ * (1 - dones))
        
        # Get expected Q values from local model
        _, Q, _, _ = self.qnetwork_local(states, actions)

        # Compute loss
        loss = self.loss(Q, V_targets) 
        
        # Minimize the loss
        self.optimizer.zero_grad()
        loss.backward()
        clip_grad_norm_(self.qnetwork_local.parameters(), self.clip_grad)
        self.optimizer.step()

        # ------------------- update target network ------------------- #
        self.soft_update(self.qnetwork_local, self.qnetwork_target)
            
        return loss.detach().cpu().numpy()

    def learn_per(self, experiences):
        """Update value parameters using given batch of experience tuples.
        Params
        ======
            experiences (Tuple[torch.Tensor]): tuple of (s, a, r, s', done) tuples 
        """
        self.optimizer.zero_grad()
        states, actions, rewards, next_states, dones, idx, weights = experiences

        states = torch.FloatTensor(states).to(self.device)
        next_states = torch.FloatTensor(np.float32(next_states)).to(self.device)
        actions = torch.LongTensor(actions).to(self.device)
        rewards = torch.FloatTensor(rewards).to(self.device).unsqueeze(1) 
        dones = torch.FloatTensor(dones).to(self.device).unsqueeze(1)
        weights = torch.FloatTensor(weights).unsqueeze(1).to(self.device)
        
        # get the Value for the next state from target model
        with torch.no_grad():
            _, _, V_, _ = self.qnetwork_target(next_states)

        # Compute Q targets for current states 
        V_targets = rewards + (self.GAMMA**self.nstep * V_ * (1 - dones))
        
        # Get expected Q values from local model
        _, Q, _, _ = self.qnetwork_local(states, actions)

        # Compute loss
        td_error = Q - V_targets
        loss = (self.loss(Q, V_targets)*weights).mean().to(self.device)
        # Minimize the loss
        loss.backward()
        clip_grad_norm_(self.qnetwork_local.parameters(), self.clip_grad)
        self.optimizer.step()

        # ------------------- update target network ------------------- #
        self.soft_update(self.qnetwork_local, self.qnetwork_target)
        # update per priorities
        self.memory.update_priorities(idx, abs(td_error.data.cpu().numpy()))

        
        return loss.detach().cpu().numpy()       

    def soft_update(self, local_model, target_model):
        """Soft update model parameters.
        θ_target = τ*θ_local + (1 - τ)*θ_target
        Params
        ======
            local_model (PyTorch model): weights will be copied from
            target_model (PyTorch model): weights will be copied to
            tau (float): interpolation parameter 
        """
        for target_param, local_param in zip(target_model.parameters(), local_model.parameters()):
            target_param.data.copy_(self.TAU*local_param.data + (1.0-self.TAU)*target_param.data)

    def maybe_toggle_policy(self):
        if self.mba and self.models_fitted:
            r = np.random.rand()
            if r < self.mu_prob:
                print('\nToggling to naf policy...')
                self.use_ilqg_policy = False
            else:
                print('\nToggling to ilqg policy...')
                self.use_ilqg_policy = True
                
    def maybe_flld_ilqg(self):
        if self.mba and self.B.is_full():
            print('\nFitting LLDs and generating controllers...')
            self.llds, self.gs = self.accelerator.flld_ilqg(self.B)
            
            assert isinstance(self.llds, dict)
            assert isinstance(self.gs, list)
            
            # set flag to do im-rollouts and im-learning
            self.models_fitted = True
            
            # swaps references for B and B_old for efficiency
            tmp = self.B_old
            self.B_old = self.B
            self.B = tmp
            self.B.clear()
    
    def _pendulum_reward(self, x, x_next, u, t):
        theta = np.arccos(x_next[0])
        theta_prev = np.arccos(x[0])
        theta_dt = theta - theta_prev
        torque = u[0]

        t1 = theta ** 2
        t2 = 0.1 * (theta_dt ** 2)
        t3 = 0.001 * (torque ** 2)
        
        done = t == 200

        return -(t1 + t2 + t3), done


    def _mountaincar_reward(self, x_next, u, t):
        r = -0.1 * (u[0] ** 2)
        done = False
        if x_next[0] >= 0.45:
            r += 100
            done = True
            
        # t + 1 because t is 0-indexed
        if t + 1 == 999:
            done = True

        return r, done


    def _simglucose_reward(self, x, x_next):
        if self.custom_reward == 'default':
            r = risk_diff([x, x_next])
        elif self.custom_reward == 'simple':
            r = simple_reward([x_next])
        else:
            # magni or kovatchev reward
            r = my_reward_closure(self.custom_reward)([x_next])
            
        done = x_next[0] < 10 or x_next[0] > 600

        return r, done


    def reward_fn(self, x, x_next, u, t):
        if self.envname == 'Pendulum-v1':
            r, done = self._pendulum_reward(x, x_next, u, t)
        elif self.envname == 'MountainCarContinuous-v0':
            r, done = self._mountaincar_reward(x_next, u, t)
        elif self.envname == 'simglucose-adolescent2-v0':
            r, done = self._simglucose_reward(x, x_next)

        return r, done
    
    def lq_reward_matrices(self):
        # returns reward = -cost
        xu_len = self.state_size + self.action_size
        R_t = -self.rxu_quad_scale * np.eye(xu_len)
        r_t = -self.rxu_lin_scale * np.ones(xu_len)
        
        assert R_t.shape == (xu_len, xu_len)
        assert r_t.shape == (xu_len,)
        
        return R_t, r_t